// <auto-generated />
using System;
using CRM.DataModel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CRM.DataModel.Migrations
{
    [DbContext(typeof(CrmDbContext))]
    [Migration("20201018121113_Third")]
    partial class Third
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CRM.DataModel.Models.CrmEmployees", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AboutMe")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnName("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CrmPatientsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CrmUsersId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DictCitiesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DictDepartmentsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DictEnterprisesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DictGendersId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DictPositionsId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("EditorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Iin")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MiddlenameEn")
                        .HasColumnType("text");

                    b.Property<string>("MiddlenameKz")
                        .HasColumnType("text");

                    b.Property<string>("MiddlenameRu")
                        .HasColumnType("text");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhotoB64")
                        .HasColumnType("text");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("SurnameEn")
                        .HasColumnType("text");

                    b.Property<string>("SurnameKz")
                        .HasColumnType("text");

                    b.Property<string>("SurnameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CrmPatientsId");

                    b.HasIndex("DictCitiesId");

                    b.HasIndex("DictDepartmentsId");

                    b.HasIndex("DictEnterprisesId");

                    b.HasIndex("DictGendersId");

                    b.HasIndex("DictPositionsId");

                    b.HasIndex("EditorId");

                    b.ToTable("CrmEmployees");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmEmployeesWorkPlans", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CrmEmployeesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DutyDate")
                        .HasColumnName("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("DutyPeriodInDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("EditorId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("FridayWorkTimeFrom")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("FridayWorkTimeTo")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("MondayWorkTimeFrom")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("MondayWorkTimeTo")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("SaturdayWorkTimeFrom")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("SaturdayWorkTimeTo")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("SundayWorkTimeFrom")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("SundayWorkTimeTo")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("ThursdayWorkTimeFrom")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("ThursdayWorkTimeTo")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("TuesdayWorkTimeFrom")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("TuesdayWorkTimeTo")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("WebnesdayWorkTimeFrom")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("WebnesdayWorkTimeTo")
                        .HasColumnType("interval");

                    b.Property<int?>("WorkPeriodInDays")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("WorkTimeFrom")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("WorkTimeTo")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CrmEmployeesId");

                    b.HasIndex("EditorId");

                    b.ToTable("CrmEmployeesWorkPlans");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmHolidays", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("EditorId")
                        .HasColumnType("bigint");

                    b.Property<int>("HolidayDay")
                        .HasColumnType("integer");

                    b.Property<int>("HolidayMonth")
                        .HasColumnType("integer");

                    b.Property<int?>("HolidayYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRepeatYearly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWork")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EditorId");

                    b.ToTable("CrmHolidays");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AboutMe")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnName("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CrmUsersId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DictCitiesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DictGendersId")
                        .HasColumnType("bigint");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("EditorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Iin")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("JobPlace")
                        .HasColumnType("text");

                    b.Property<string>("MiddlenameEn")
                        .HasColumnType("text");

                    b.Property<string>("MiddlenameKz")
                        .HasColumnType("text");

                    b.Property<string>("MiddlenameRu")
                        .HasColumnType("text");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhotoB64")
                        .HasColumnType("text");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("SurnameEn")
                        .HasColumnType("text");

                    b.Property<string>("SurnameKz")
                        .HasColumnType("text");

                    b.Property<string>("SurnameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DictCitiesId");

                    b.HasIndex("DictGendersId");

                    b.HasIndex("EditorId");

                    b.ToTable("CrmPatients");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsAppointments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("AppointmentEndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("AppointmentEndedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("AppointmentStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("AppointmentStartedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Complain")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CrmPatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("DictStatusesId")
                        .HasColumnType("bigint");

                    b.Property<string>("DoctorsAppointment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("EditorId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsOutOfLine")
                        .HasColumnType("boolean");

                    b.Property<string>("OutOfLineReason")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<float>("ServicePrice")
                        .HasColumnType("real");

                    b.Property<long>("ToCrmEmployeesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CrmPatientsId");

                    b.HasIndex("DictStatusesId");

                    b.HasIndex("EditorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ToCrmEmployeesId");

                    b.ToTable("CrmPatientsAppointments");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsAppointmentsFiles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CrmPatientsAppointmentsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CrmPatientsAppointmentsId");

                    b.ToTable("CrmPatientsAppointmentsFiles");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsAppointmentsServices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CrmPatientsAppointmentsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DictServicesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CrmPatientsAppointmentsId");

                    b.HasIndex("DictServicesId");

                    b.ToTable("CrmPatientsAppointmentsServices");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsIntolerances", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CrmPatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionKz")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text");

                    b.Property<long?>("DictIntolerancesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CrmPatientsId");

                    b.HasIndex("DictIntolerancesId");

                    b.ToTable("CrmPatientsIntolerances");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsLoyaltyPrograms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CrmPatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("DictLoyaltyProgramsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CrmPatientsId");

                    b.HasIndex("DictLoyaltyProgramsId");

                    b.ToTable("CrmPatientsLoyaltyPrograms");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("CrmRoleClaims");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("CrmRoles");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("CrmUserClaims");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("CrmUserLogins");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUserRoles", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId1")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("CrmUserRoles");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUserTokens", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("UserId1");

                    b.ToTable("CrmUserTokens");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUsers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CrmEmployeesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CrmPatientsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CrmEmployeesId")
                        .IsUnique();

                    b.HasIndex("CrmPatientsId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("CrmUsers");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictCities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("DictCountriesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictCountriesId");

                    b.ToTable("DictCities");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictCountries", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictCountries");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictDepartments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("DictEnterprisesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictEnterprisesId");

                    b.ToTable("DictDepartments");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictEnterprises", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("DictEnterprises");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictGenders", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictGenders");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictIntolerances", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionKz")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictIntolerances");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictLoyaltyPrograms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionKz")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text");

                    b.Property<long?>("DictEnterprisesId")
                        .HasColumnType("bigint");

                    b.Property<float>("DiscountAmount")
                        .HasColumnType("real");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictEnterprisesId");

                    b.ToTable("DictLoyaltyPrograms");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictPositions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionKz")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text");

                    b.Property<long?>("DictEnterprisesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DictEnterprisesId");

                    b.ToTable("DictPositions");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictServices", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionKz")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text");

                    b.Property<long?>("DictDepartmentsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DictDepartmentsId");

                    b.ToTable("DictServices");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictStatuses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EditedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameKz")
                        .HasColumnType("text");

                    b.Property<string>("NameRu")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictStatuses");
                });

            modelBuilder.Entity("CRM.DataModel.Models.Notifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReadDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmEmployees", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Author")
                        .WithMany("CrmEmployeesAuthors")
                        .HasForeignKey("AuthorId");

                    b.HasOne("CRM.DataModel.Models.CrmPatients", "CrmPatient")
                        .WithMany("CrmEmployees")
                        .HasForeignKey("CrmPatientsId");

                    b.HasOne("CRM.DataModel.Models.DictCities", "DictCity")
                        .WithMany("CrmEmployees")
                        .HasForeignKey("DictCitiesId")
                        .HasConstraintName("FK_CrmEmployees_DictCities");

                    b.HasOne("CRM.DataModel.Models.DictDepartments", "DictDepartment")
                        .WithMany("CrmEmployees")
                        .HasForeignKey("DictDepartmentsId")
                        .HasConstraintName("FK_CrmEmployees_DictDepartments");

                    b.HasOne("CRM.DataModel.Models.DictEnterprises", "DictEnterprise")
                        .WithMany("CrmEmployees")
                        .HasForeignKey("DictEnterprisesId")
                        .HasConstraintName("FK_CrmEmployees_DictEnterprises");

                    b.HasOne("CRM.DataModel.Models.DictGenders", "DictGender")
                        .WithMany("CrmEmployees")
                        .HasForeignKey("DictGendersId")
                        .HasConstraintName("FK_CrmEmployees_DictGenders");

                    b.HasOne("CRM.DataModel.Models.DictPositions", "DictPosition")
                        .WithMany("CrmEmployees")
                        .HasForeignKey("DictPositionsId")
                        .HasConstraintName("FK_CrmEmployees_DictPositions");

                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Editor")
                        .WithMany("CrmEmployeesEditors")
                        .HasForeignKey("EditorId");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmEmployeesWorkPlans", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Author")
                        .WithMany("CrmSystemSettingsAuthors")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_CrmSystemSettings_Authors_CrmUsers")
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.CrmEmployees", "CrmEmployee")
                        .WithMany("CrmEmployeesWorkPlans")
                        .HasForeignKey("CrmEmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Editor")
                        .WithMany("CrmSystemSettingsEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_CrmSystemSettings_Editor_CrmUsers");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmHolidays", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Author")
                        .WithMany("CrmHolidaysAuthors")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_CrmHolidays_Authors_CrmUsers")
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Editor")
                        .WithMany("CrmHolidaysEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_CrmHolidays_Editor_CrmUsers");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatients", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Author")
                        .WithMany("CrmPatientsAuthors")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_CrmPatients_Author_CrmUsers");

                    b.HasOne("CRM.DataModel.Models.DictCities", "DictCity")
                        .WithMany("CrmPatients")
                        .HasForeignKey("DictCitiesId")
                        .HasConstraintName("FK_CrmPatients_DictCities");

                    b.HasOne("CRM.DataModel.Models.DictGenders", "DictGender")
                        .WithMany("CrmPatients")
                        .HasForeignKey("DictGendersId")
                        .HasConstraintName("FK_CrmPatients_DictGenders");

                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Editor")
                        .WithMany("CrmPatientsEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_CrmPatients_Editor_CrmUsers");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsAppointments", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Author")
                        .WithMany("CrmPatientsAppointmentsAuthors")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_CrmPatientsAppointments_Author_CrmUsers");

                    b.HasOne("CRM.DataModel.Models.CrmPatients", "CrmPatient")
                        .WithMany("CrmPatientsAppointments")
                        .HasForeignKey("CrmPatientsId")
                        .HasConstraintName("FK_CrmPatientsAppointments_CrmPatients")
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.DictStatuses", "DictStatus")
                        .WithMany("CrmPatientsAppointments")
                        .HasForeignKey("DictStatusesId")
                        .HasConstraintName("FK_CrmPatientsAppointments_DictStatuses")
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.CrmUsers", "Editor")
                        .WithMany("CrmPatientsAppointmentsEditors")
                        .HasForeignKey("EditorId")
                        .HasConstraintName("FK_CrmPatientsAppointments_Editor_CrmUsers");

                    b.HasOne("CRM.DataModel.Models.CrmPatientsAppointments", "ParentCrmPatientsAppointment")
                        .WithMany("ChildCrmPatientsAppointments")
                        .HasForeignKey("ParentId");

                    b.HasOne("CRM.DataModel.Models.CrmEmployees", "ToCrmEmployee")
                        .WithMany("CrmPatientsAppointments")
                        .HasForeignKey("ToCrmEmployeesId")
                        .HasConstraintName("FK_CrmPatientsAppointments_CrmEmployees")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsAppointmentsFiles", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmPatientsAppointments", "CrmPatientsAppointment")
                        .WithMany("CrmPatientsAppointmentsFiles")
                        .HasForeignKey("CrmPatientsAppointmentsId")
                        .HasConstraintName("FK_CrmPatientsAppointmentsFiles_CrmPatientsAppointments")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsAppointmentsServices", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmPatientsAppointments", "CrmPatientsAppointment")
                        .WithMany("CrmPatientsAppointmentsServices")
                        .HasForeignKey("CrmPatientsAppointmentsId")
                        .HasConstraintName("FK_CrmPatientsAppointmentsServices_CrmPatientsAppointments")
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.DictServices", "DictService")
                        .WithMany("CrmPatientsAppointmentsServices")
                        .HasForeignKey("DictServicesId")
                        .HasConstraintName("FK_CrmPatientsAppointmentsServices_DictServices");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsIntolerances", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmPatients", "CrmPatient")
                        .WithMany("CrmPatientsIntolerances")
                        .HasForeignKey("CrmPatientsId")
                        .HasConstraintName("FK_CrmPatientsIntolerances_CrmPatients")
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.DictIntolerances", "DictIntolerance")
                        .WithMany("CrmPatientsIntolerances")
                        .HasForeignKey("DictIntolerancesId")
                        .HasConstraintName("FK_CrmPatientsIntolerances_DictIntolerances");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmPatientsLoyaltyPrograms", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmPatients", "CrmPatient")
                        .WithMany("CrmPatientsLoyaltyPrograms")
                        .HasForeignKey("CrmPatientsId")
                        .HasConstraintName("FK_CrmPatientsLoyaltyPrograms_CrmPatients")
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.DictLoyaltyPrograms", "DictLoyaltyProgram")
                        .WithMany("CrmPatientsLoyaltyPrograms")
                        .HasForeignKey("DictLoyaltyProgramsId")
                        .HasConstraintName("FK_CrmPatientsLoyaltyPrograms_DictLoyaltyPrograms")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmRoleClaims", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.CrmRoles", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId1");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUserClaims", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.CrmUsers", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUserLogins", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.CrmUsers", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUserRoles", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.CrmRoles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("CRM.DataModel.Models.CrmUsers", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CrmUsers_UserRoles")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUserTokens", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRM.DataModel.Models.CrmUsers", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("CRM.DataModel.Models.CrmUsers", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmEmployees", "CrmEmployee")
                        .WithOne("CrmUser")
                        .HasForeignKey("CRM.DataModel.Models.CrmUsers", "CrmEmployeesId")
                        .HasConstraintName("FK_CrmUsers_CrmEmployees");

                    b.HasOne("CRM.DataModel.Models.CrmPatients", "CrmPatient")
                        .WithOne("CrmUser")
                        .HasForeignKey("CRM.DataModel.Models.CrmUsers", "CrmPatientsId")
                        .HasConstraintName("FK_CrmUsers_CrmPatients");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictCities", b =>
                {
                    b.HasOne("CRM.DataModel.Models.DictCountries", "DictCountry")
                        .WithMany("DictCities")
                        .HasForeignKey("DictCountriesId")
                        .HasConstraintName("FK_DictCities_DictCountries")
                        .IsRequired();
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictDepartments", b =>
                {
                    b.HasOne("CRM.DataModel.Models.DictEnterprises", "DictEnterprise")
                        .WithMany("DictDepartments")
                        .HasForeignKey("DictEnterprisesId")
                        .HasConstraintName("FK_DictDepartments_DictEnterprises");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictEnterprises", b =>
                {
                    b.HasOne("CRM.DataModel.Models.DictEnterprises", "ParentEnterprise")
                        .WithMany("EnterpriseBranches")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_DictEnterprises_EnterpriseBranches");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictLoyaltyPrograms", b =>
                {
                    b.HasOne("CRM.DataModel.Models.DictEnterprises", "DictEnterprise")
                        .WithMany("DictLoyaltyPrograms")
                        .HasForeignKey("DictEnterprisesId")
                        .HasConstraintName("FK_DictLoyaltyPrograms_DictEnterprises");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictPositions", b =>
                {
                    b.HasOne("CRM.DataModel.Models.DictEnterprises", "DictEnterprise")
                        .WithMany("DictPositions")
                        .HasForeignKey("DictEnterprisesId")
                        .HasConstraintName("FK_DictPositions_DictEnterprises");
                });

            modelBuilder.Entity("CRM.DataModel.Models.DictServices", b =>
                {
                    b.HasOne("CRM.DataModel.Models.DictDepartments", "DictDepartment")
                        .WithMany("DictServices")
                        .HasForeignKey("DictDepartmentsId")
                        .HasConstraintName("FK_DictServices_DictDepartments");
                });

            modelBuilder.Entity("CRM.DataModel.Models.Notifications", b =>
                {
                    b.HasOne("CRM.DataModel.Models.CrmUsers", "NotificationReceiver")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK_Notifications_NotificationReceiver_CrmUsers")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
